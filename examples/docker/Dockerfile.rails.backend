FROM ruby:3.1-slim AS ruby-base
LABEL maintainer="Adam Sumner <adam@gojilabs.com>"

ARG PROJECT_ENV

# Setup static environment variables
ENV APP_DIR /var/app
ENV RAILS_SERVE_STATIC_FILES true
ENV RAILS_LOG_TO_STDOUT true
ENV RAILS_ENV ${PROJECT_ENV}

# Install base dependencies
RUN apt-get update -qq && \
    apt-get install -y curl gnupg2 && \
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && \
    apt-get update -qq && \
    apt-get install -y autoconf bison build-essential bzip2 ca-certificates ffmpeg gettext-base git-core libbz2-dev libcurl4-openssl-dev libffi-dev libgdbm6 libgdbm-dev libmupdf-dev libncurses5-dev libpq-dev libqt5webkit5-dev libreadline6-dev libssl-dev libvips-dev libxml2-dev libxslt1-dev libyaml-dev lsb-release openssl pkg-config xml2 xvfb yarn zlib1g-dev && \
    apt-get clean

# Upgrade rubygems
RUN gem update --system

# Create project directory
RUN mkdir -p ${APP_DIR}
RUN chmod -R 0777 ${APP_DIR}

FROM ruby-base AS bundle-ruby-base

RUN cd ${APP_DIR} && \
  bundle config set deployment true && \
  bundle config set without development:test && \
  bundle config set clean true && \
  bundle config set jobs 20 && \
  bundle config set force_ruby_platform true && \
  bundle config set retry 5

# Install bundled gems
COPY Gemfile Gemfile.lock ${APP_DIR}/
RUN cd ${APP_DIR} && bundle install

FROM bundle-ruby-base AS bundled-ruby-base

# Setup default environment variables
ARG API_URL=api.exampleproject.app
ARG APP_URL=app.exampleproject.app
ARG CORELOGIC_CONSUMER_KEY=bogus
ARG CORELOGIC_CONSUMER_SECRET=bogus
ARG DOMAIN=exampleproject.app
ARG HOST=api.exampleproject.app
ARG PORT=3000
ARG SECRET_KEY_BASE=bogus
ARG SENDGRID_API_KEY=bogus

# this should not be set anywhere outside of this Dockerfile,
# it allows us to skip certain configurations that need not run
# during container compilation
ARG BUILDING_CONTAINER=true

# Setup dependent environment variables
ARG RAILS_ENV=${PROJECT_ENV}
ARG NODE_ENV=production

# Copy entire project
COPY . ${APP_DIR}

# Precompile assets
RUN cd ${APP_DIR} && bin/rails assets:clobber assets:precompile

# Cleanup
RUN rm -rf $HOME/.ssh /var/cache/apt/archives/* /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    truncate -s 0 /var/log/*log

# Set working directory
WORKDIR ${APP_DIR}

# Export container port
EXPOSE ${PORT}
